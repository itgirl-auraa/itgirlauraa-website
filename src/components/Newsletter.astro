---
interface Props {
  title?: string;
  description?: string;
  buttonText?: string;
}

const {
  title = "Join the It Girl Community",
  description = "Get exclusive beauty tips, product recommendations, and lifestyle inspiration delivered straight to your inbox.",
  buttonText = "Subscribe"
} = Astro.props;
---

<section class="bg-beige py-12 sm:py-16" aria-labelledby="newsletter-heading">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center">
      <h2 id="newsletter-heading" class="font-display text-2xl sm:text-3xl text-espresso mb-3 sm:mb-4">{title}</h2>
      <p class="text-bronze text-sm sm:text-base mb-6 sm:mb-8 max-w-lg mx-auto">
        {description}
      </p>
      <form 
        id="newsletter-form" 
        class="max-w-md mx-auto"
        aria-labelledby="newsletter-heading"
      >
        <div class="flex flex-col sm:flex-row gap-2">
          <label for="email-input" class="sr-only">Email address</label>
          <input
            id="email-input"
            type="email"
            name="email"
            placeholder="Enter your email"
            class="w-full sm:flex-1 px-4 py-2 rounded-md border border-beige/70 bg-vanilla focus:outline-none focus:ring-2 focus:ring-espresso focus:border-transparent"
            required
          />
          <button
            type="submit"
            class="w-full sm:w-auto px-6 py-2 bg-espresso text-white font-medium text-sm sm:text-base rounded-md hover:bg-espresso/80 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-espresso disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span class="submit-text">{buttonText}</span>
            <span class="loading-text hidden">
              Subscribing...
            </span>
          </button>
        </div>
        <div class="mt-3 text-sm">
          <p class="success-message hidden text-green-600"></p>
          <p class="error-message hidden text-red-500"></p>
        </div>
      </form>
    </div>
  </div>
</section>

<script>
  const form = document.getElementById('newsletter-form') as HTMLFormElement;
  const submitBtn = form?.querySelector('button[type="submit"]') as HTMLButtonElement;
  const submitText = submitBtn?.querySelector('.submit-text') as HTMLElement;
  const loadingText = submitBtn?.querySelector('.loading-text') as HTMLElement;
  const successMessage = form?.querySelector('.success-message') as HTMLElement;
  const errorMessage = form?.querySelector('.error-message') as HTMLElement;

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Reset messages
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');
      
      // Show loading state
      submitBtn.disabled = true;
      submitText.classList.add('hidden');
      loadingText.classList.remove('hidden');
      
      try {
        const formData = new FormData(form);
        const response = await fetch('/api/subscribe', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: formData.get('email'),
          }),
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // Show success message
          successMessage.textContent = data.message;
          successMessage.classList.remove('hidden');
          form.reset();
        } else {
          // Show error message
          errorMessage.textContent = data.message;
          errorMessage.classList.remove('hidden');
        }
      } catch (error) {
        // Show error message
        errorMessage.textContent = 'An error occurred. Please try again later.';
        errorMessage.classList.remove('hidden');
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitText.classList.remove('hidden');
        loadingText.classList.add('hidden');
      }
    });
  }
</script> 